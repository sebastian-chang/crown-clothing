{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user-types';\nimport { signInFailure, signInSuccess } from './user-actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils'; // Generator function for signing user in.  Takes parameter of userAuth from either\n// Username and password or Google Signin.\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n\n    if (!userAuth) {\n      return;\n    }\n\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // Goolge signin function sending user from Goolge sign in to generator function\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n} // Signin with username and password function sending user info to generator function\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\nexport function* onEmailSigninStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSigninStart)]);\n}","map":{"version":3,"sources":["/Users/schang/Documents/Learning/React Developer/crown-clothing/src/redux/user/user-sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInFailure","signInSuccess","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","isUserAuthenticated","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSigninStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAA0DC,cAA1D,QAAgF,+BAAhF,C,CAEA;AACA;;AACA,OAAO,UAAUC,uBAAV,CAAmCC,QAAnC,EAA6C;AAClD,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACM,yBAAD,EAA4BG,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACK,aAAa,CAAC;AACtBU,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADK;AAEtB,SAAGF,YAAY,CAACG,IAAb;AAFmB,KAAD,CAAd,CAAT;AAID,GAPD,CAQA,OAAOC,KAAP,EAAc;AACZ,UAAMjB,GAAG,CAACI,aAAa,CAACa,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,mBAAV,GAAiC;AACtC,MAAI;AACF,UAAMP,QAAQ,GAAG,MAAMF,cAAc,EAArC;;AACA,QAAG,CAACE,QAAJ,EAAc;AACZ;AACD;;AACD,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACD,GAND,CAOA,OAAMM,KAAN,EAAa;AACX,UAAMjB,GAAG,CAACI,aAAa,CAACa,KAAD,CAAd,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUE,gBAAV,GAA8B;AACnC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMd,IAAI,CAACe,eAAL,CAAqBd,cAArB,CAAvB;AACA,UAAMG,uBAAuB,CAACU,IAAD,CAA7B;AACD,GAHD,CAIA,OAAOH,KAAP,EAAc;AACZ,UAAMjB,GAAG,CAACI,aAAa,CAACa,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUK,mBAAV,GAAiC;AACtC,QAAMvB,UAAU,CAACI,eAAe,CAACoB,oBAAjB,EAAuCJ,gBAAvC,CAAhB;AACD,C,CAED;;AACA,OAAO,UAAUK,eAAV,CAA2B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA3B,EAA6D;AAClE,MAAI;AACF,UAAM;AAAEP,MAAAA;AAAF,QAAW,MAAMd,IAAI,CAACsB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMjB,uBAAuB,CAACU,IAAD,CAA7B;AACD,GAHD,CAIA,OAAOH,KAAP,EAAc;AACZjB,IAAAA,GAAG,CAACI,aAAa,CAACa,KAAD,CAAd,CAAH;AACD;AACF;AAED,OAAO,UAAUY,kBAAV,GAAgC;AACrC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,mBAAjB,EAAsCN,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUO,kBAAV,GAAgC;AACrC,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,kBAAjB,EAAqCd,mBAArC,CAAhB;AACD;AAED,OAAO,UAAUe,SAAV,GAAuB;AAC5B,QAAMhC,GAAG,CAAC,CACRC,IAAI,CAACoB,mBAAD,CADI,EAERpB,IAAI,CAAC2B,kBAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\n\nimport UserActionTypes from './user-types'\nimport { signInFailure, signInSuccess } from './user-actions'\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils'\n\n// Generator function for signing user in.  Takes parameter of userAuth from either\n// Username and password or Google Signin.\nexport function* getSnapshotFromUserAuth (userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth)\n    const userSnapshot = yield userRef.get()\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data(),\n    }))\n  }\n  catch (error) {\n    yield put(signInFailure(error))\n  }\n}\n\nexport function* isUserAuthenticated () {\n  try {\n    const userAuth = yield getCurrentUser()\n    if(!userAuth) {\n      return\n    }\n    yield getSnapshotFromUserAuth(userAuth)\n  }\n  catch(error) {\n    yield put(signInFailure(error))\n  }\n}\n\n// Goolge signin function sending user from Goolge sign in to generator function\nexport function* signInWithGoogle () {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider)\n    yield getSnapshotFromUserAuth(user)\n  }\n  catch (error) {\n    yield put(signInFailure(error))\n  }\n}\n\nexport function* onGoogleSignInStart () {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\n// Signin with username and password function sending user info to generator function\nexport function* signInWithEmail ({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password)\n    yield getSnapshotFromUserAuth(user)\n  }\n  catch (error) {\n    put(signInFailure(error))\n  }\n}\n\nexport function* onEmailSigninStart () {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\nexport function* onCheckUserSession () {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* userSagas () {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSigninStart)\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}