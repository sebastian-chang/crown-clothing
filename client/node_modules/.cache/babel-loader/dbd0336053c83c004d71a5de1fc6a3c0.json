{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyBHvDM95_4SYaWk4H9baTBMuUoeIinFN0s\",\n  authDomain: \"crown-db-57aeb.firebaseapp.com\",\n  databaseURL: \"https://crown-db-57aeb.firebaseio.com\",\n  projectId: \"crown-db-57aeb\",\n  storageBucket: \"crown-db-57aeb.appspot.com\",\n  messagingSenderId: \"457759066944\",\n  appId: \"1:457759066944:web:7d7391593a69ebbbc648a5\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // check to see if user is logged in, if not return\n  if (!userAuth) {\n    return;\n  } // create snapshot of user creds to be stored in firebase database\n\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); // If user doesnt exist create new user\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // Create the actual user document in our firebase database\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); // Batch add items to Firestore database from our array\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    // Make me a new document object\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  }); // Store our data to the Firestore database\n\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  transformedCollection.reduce((accumlator, collection) => {\n    accumlator[collection.title.toLowerCase()] = collection;\n    return accumlator;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/schang/Documents/Learning/React Developer/crown-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumlator","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nconst config = {\n    apiKey: \"AIzaSyBHvDM95_4SYaWk4H9baTBMuUoeIinFN0s\",\n    authDomain: \"crown-db-57aeb.firebaseapp.com\",\n    databaseURL: \"https://crown-db-57aeb.firebaseio.com\",\n    projectId: \"crown-db-57aeb\",\n    storageBucket: \"crown-db-57aeb.appspot.com\",\n    messagingSenderId: \"457759066944\",\n    appId: \"1:457759066944:web:7d7391593a69ebbbc648a5\"\n}\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    // check to see if user is logged in, if not return\n    if (!userAuth) {\n        return\n    }\n\n    // create snapshot of user creds to be stored in firebase database\n    const userRef = firestore.doc(`users/${userAuth.uid}`)\n    const snapShot = await userRef.get()\n\n    // If user doesnt exist create new user\n    if (!snapShot.exists) {\n        const { displayName, email } = userAuth\n        const createdAt = new Date()\n\n        try {\n            // Create the actual user document in our firebase database\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        }\n        catch (error){\n            console.log('error creating user', error.message)\n        }\n    }\n\n    return userRef\n}\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey)\n\n    // Batch add items to Firestore database from our array\n    const batch = firestore.batch()\n    objectsToAdd.forEach(obj => {\n        // Make me a new document object\n        const newDocRef = collectionRef.doc()\n        batch.set(newDocRef, obj)\n    })\n\n    // Store our data to the Firestore database\n    return await batch.commit()\n}\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n    const transformedCollection = collections.docs.map(doc => {\n        const {title, items} = doc.data()\n\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title,\n            items,\n        }\n    })\n\n    transformedCollection.reduce((accumlator, collection) => {\n        accumlator[collection.title.toLowerCase()] = collection\n        return accumlator\n    }, {})\n}\n\nfirebase.initializeApp(config)\n\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore()\n\nconst provider = new firebase.auth.GoogleAuthProvider()\nprovider.setCustomParameters({ prompt: 'select_account' })\nexport const signInWithGoogle = () => auth.signInWithPopup(provider)\n\nexport default firebase\n"]},"metadata":{},"sourceType":"module"}