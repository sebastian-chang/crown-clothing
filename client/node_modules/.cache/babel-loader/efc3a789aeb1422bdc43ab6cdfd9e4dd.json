{"ast":null,"code":"var _jsxFileName = \"/Users/schang/Documents/Learning/React Developer/crown-clothing/src/components/sign-in/sign-in.jsx\";\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { auth, signInWithGoogle } from '../../firebase/firebase.utils';\nimport { googleSignInStart } from '../../redux/user/user-actions';\nimport './sign-in.styles.scss';\nimport FormInput from '../form-input/form-input';\nimport CustomButton from '../custom-button/custom-button';\n\nconst SignIn = () => {\n  const [user, setUser] = useState({\n    email: '',\n    password: ''\n  });\n  const dispatch = useDispatch();\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const {\n      email,\n      password\n    } = user;\n\n    try {\n      await auth.signInWithEmailAndPassword(email, password);\n      setUser({\n        email: '',\n        password: ''\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setUser(prevUser => {\n      const updatedField = {\n        [name]: value\n      };\n      const editedUser = Object.assign({}, prevUser, updatedField);\n      return editedUser;\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-in\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, \"I already have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"Sign in with your email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    label: \"Email\",\n    value: user.email,\n    required: true,\n    handleChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    label: \"Password\",\n    value: user.password,\n    handleChange: handleChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, \"Sign In\"), /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: () => dispatch(googleSignInStart),\n    isGoogleSignIn: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, \"Sign in with Google\"))));\n};\n\nexport default SignIn;","map":{"version":3,"sources":["/Users/schang/Documents/Learning/React Developer/crown-clothing/src/components/sign-in/sign-in.jsx"],"names":["React","useState","useDispatch","auth","signInWithGoogle","googleSignInStart","FormInput","CustomButton","SignIn","user","setUser","email","password","dispatch","handleSubmit","event","preventDefault","signInWithEmailAndPassword","error","console","handleChange","value","name","target","prevUser","updatedField","editedUser","Object","assign"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { auth, signInWithGoogle } from '../../firebase/firebase.utils'\nimport { googleSignInStart } from '../../redux/user/user-actions'\n\nimport './sign-in.styles.scss'\nimport FormInput from '../form-input/form-input'\nimport CustomButton from '../custom-button/custom-button'\n\nconst SignIn = () => {\n    const [user, setUser] = useState({\n        email: '',\n        password: '',\n    })\n    const dispatch = useDispatch()\n\n    const handleSubmit = async event => {\n        event.preventDefault()\n        const { email, password } = user\n        try {\n            await auth.signInWithEmailAndPassword(email, password)\n            setUser({\n                email: '',\n                password: '',\n            })\n        }\n        catch (error) {\n            console.error(error)\n        }\n    }\n\n    const handleChange = event => {\n        const { value, name } = event.target\n\n        setUser(prevUser => {\n            const updatedField = { [name]: value }\n            const editedUser = Object.assign({}, prevUser, updatedField)\n            return editedUser\n        })\n    }\n\n    return (\n        <div className='sign-in'>\n            <h2>I already have an account</h2>\n            <span>Sign in with your email and password</span>\n\n            <form onSubmit={handleSubmit}>\n                <FormInput\n                    name='email'\n                    type='email'\n                    label='Email'\n                    value={user.email}\n                    required\n                    handleChange={handleChange}\n                />\n                <FormInput\n                    name='password'\n                    type='password'\n                    label='Password'\n                    value={user.password}\n                    handleChange={handleChange}\n                    required\n                />\n                <div className='buttons'>\n                    <CustomButton type='submit'>Sign In</CustomButton>\n                    <CustomButton type='button' onClick={() => dispatch(googleSignInStart)} isGoogleSignIn>Sign in with Google</CustomButton>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default SignIn\n"]},"metadata":{},"sourceType":"module"}