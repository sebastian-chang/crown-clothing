{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user-types';\nimport { signInFailure, signInSuccess, signOutFailure, signOutSuccess } from './user-actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils'; // Generator function for signing user in.  Takes parameter of userAuth from either\n// Username and password or Google Signin.\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n\n    if (!userAuth) {\n      return;\n    }\n\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isSignOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n} // Goolge signin function sending user from Goolge sign in to generator function\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // Signin with username and password function sending user info to generator function\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSigninStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, isSignOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSigninStart), call(onCheckUserSession), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["/Users/schang/Documents/Learning/React Developer/crown-clothing/src/redux/user/user-sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInFailure","signInSuccess","signOutFailure","signOutSuccess","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","isUserAuthenticated","isSignOut","signOut","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSigninStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\n\nimport UserActionTypes from './user-types'\nimport { signInFailure, signInSuccess, signOutFailure, signOutSuccess } from './user-actions'\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils'\n\n// Generator function for signing user in.  Takes parameter of userAuth from either\n// Username and password or Google Signin.\nexport function* getSnapshotFromUserAuth (userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth)\n    const userSnapshot = yield userRef.get()\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data(),\n    }))\n  }\n  catch (error) {\n    yield put(signInFailure(error))\n  }\n}\n\nexport function* isUserAuthenticated () {\n  try {\n    const userAuth = yield getCurrentUser()\n    if (!userAuth) {\n      return\n    }\n    yield getSnapshotFromUserAuth(userAuth)\n  }\n  catch (error) {\n    yield put(signInFailure(error))\n  }\n}\n\nexport function* isSignOut () {\n  try {\n    yield auth.signOut()\n    yield put(signOutSuccess())\n  }\n  catch (error) {\n    yield put(signOutFailure(error))\n  }\n}\n\n// Goolge signin function sending user from Goolge sign in to generator function\nexport function* signInWithGoogle () {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider)\n    yield getSnapshotFromUserAuth(user)\n  }\n  catch (error) {\n    yield put(signInFailure(error))\n  }\n}\n\n// Signin with username and password function sending user info to generator function\nexport function* signInWithEmail ({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password)\n    yield getSnapshotFromUserAuth(user)\n  }\n  catch (error) {\n    put(signInFailure(error))\n  }\n}\n\nexport function* onGoogleSignInStart () {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onEmailSigninStart () {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\nexport function* onCheckUserSession () {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* onSignOutStart () {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, isSignOut)\n}\n\nexport function* onSignUpStart () {\n  yield takeLatest(UserActionTypes.SIGN_UP_START,)\n}\n\nexport function* userSagas () {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSigninStart),\n    call(onCheckUserSession),\n    call(onSignOutStart),\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}